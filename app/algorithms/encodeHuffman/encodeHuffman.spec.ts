import encodeHuffman from './encodeHuffman';

describe('–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É—é—â—É—é –∞–ª–≥–æ—Ä–∏—Ç–º –•–∞—Ñ—Ñ–º–∞–Ω–∞ ü§°', () => {
  test('–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º–æ–≥–æ —Ç–∏–ø–∞ —Ñ—É–Ω–∫—Ü–∏–∏ encodeHuffman()', () => {
    '–§—É–Ω–∫—Ü–∏—è encodeHuffman() –¥–æ–ª–∂–Ω–∞ –≤–µ—Ä–Ω—É—Ç—å –æ–±—ä–µ–∫—Ç';

    const str = 'beep boop beer!';

    const actual = typeof encodeHuffman(str);
    const expected = 'object';

    expect(actual).toBe(expected);
  });

  test('–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–∏–ø–∞ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –º–∞—Å—Å–∏–≤–∞, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º–æ–≥–æ —Ñ—É–Ω–∫—Ü–∏–µ–π encodeHuffman()', () => {
    '–§—É–Ω–∫—Ü–∏—è encodeHuffman() –¥–æ–ª–∂–Ω–∞ –≤–µ—Ä–Ω—É—Ç—å –º–∞—Å—Å–∏–≤ –æ–±—ä–µ–∫—Ç–æ–≤';

    const str = 'beep boop beer!';

    encodeHuffman(str).forEach((element: { char: string; code: string }) => {
      const actual = typeof element;
      const expected = 'object';

      expect(actual).toBe(expected);
    });
  });

  test('–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª–µ–π –æ–±—ä–µ–∫—Ç–æ–≤ (—ç–ª–µ–º–µ–Ω—Ç–æ–≤) –º–∞—Å—Å–∏–≤–∞, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º–æ–≥–æ —Ñ—É–Ω–∫—Ü–∏–µ–π encodeHuffman()', () => {
    '–§—É–Ω–∫—Ü–∏—è encodeHuffman() –¥–æ–ª–∂–Ω–∞ –≤–µ—Ä–Ω—É—Ç—å –º–∞—Å—Å–∏–≤ –æ–±—ä–µ–∫—Ç–æ–≤ –≤–∏–¥–∞ { char: string; code: string; }';

    const str = 'beep boop beer!';

    encodeHuffman(str).forEach((obj: { char: string; code: string }) => {
      const actual = Object.keys(obj);
      const expected = ['char', 'code'];

      expect(actual).toStrictEqual(expected);
    });
  });

  test('–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–∏–ø–æ–≤ –ø–æ–ª–µ–π –æ–±—ä–µ–∫—Ç–æ–≤ (—ç–ª–µ–º–µ–Ω—Ç–æ–≤) –º–∞—Å—Å–∏–≤–∞, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º–æ–≥–æ —Ñ—É–Ω–∫—Ü–∏–µ–π encodeHuffman()', () => {
    '–§—É–Ω–∫—Ü–∏—è encodeHuffman() –¥–æ–ª–∂–Ω–∞ –≤–µ—Ä–Ω—É—Ç—å –º–∞—Å—Å–∏–≤ –æ–±—ä–µ–∫—Ç–æ–≤ –≤–∏–¥–∞ { char: string; code: string; }';

    const str = 'beep boop beer!';

    encodeHuffman(str).forEach((obj: { char: string; code: string }) => {
      const actual = Object.values(obj).map(value => typeof value);
      const expected = ['string', 'string'];

      expect(actual).toStrictEqual(expected);
    });
  });

  test('–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–∏ encodeHuffman() –ø—Ä–∏ –≤—ã–∑–æ–≤–µ –µ—ë —Å –ø—É—Å—Ç–æ–π —Å—Ç—Ä–æ–∫–æ–π', () => {
    '–§—É–Ω–∫—Ü–∏—è encodeHuffman() –¥–æ–ª–∂–Ω–∞ –≤–µ—Ä–Ω—É—Ç—å –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ –µ—ë —Å –ø—É—Å—Ç–æ–π —Å—Ç—Ä–æ–∫–æ–π';

    const str = '';
    const actual = encodeHuffman(str).length;
    const expected = 0;

    expect(actual).toBe(expected);
  });

  test('–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª–∏–Ω–Ω—ã –≤–æ–∑–≤—Ä–∞—â–∞–µ–º–æ–≥–æ –º–∞—Å—Å–∏–≤–∞ —Ñ—É–Ω–∫—Ü–∏–∏ encodeHuffman() –ø—Ä–∏ –≤—ã–∑–æ–≤–µ –µ—ë —Å–æ —Å—Ç—Ä–æ–∫–æ–π ` Aaa`', () => {
    '–§—É–Ω–∫—Ü–∏—è encodeHuffman() –¥–æ–ª–∂–Ω–∞ –≤–µ—Ä–Ω—É—Ç—å –º–∞—Å—Å–∏–≤ –¥–ª–∏–Ω–Ω—ã 3 –ø—Ä–∏ –≤—ã–∑–æ–≤–µ –µ—ë —Å–æ —Å—Ç—Ä–æ–∫–æ–π ` Aaa`';

    const str = ' Aaa';
    const actual = encodeHuffman(str).length;
    const expected = 3;

    expect(actual).toBe(expected);
  });

  test('–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–∏ encodeHuffman() –ø—Ä–∏ –≤—ã–∑–æ–≤–µ –µ—ë —Å–æ —Å—Ç—Ä–æ–∫–æ–π ` Aaa`', () => {
    '–§—É–Ω–∫—Ü–∏—è encodeHuffman() –¥–æ–ª–∂–Ω–∞ –≤–µ—Ä–Ω—É—Ç—å –º–∞—Å—Å–∏–≤ —Å–æ –∑–Ω–∞—á–µ–Ω–∏–µ–º';
    '[{ char: `a`, code: `1`}, {char: `A`, code: `01`}, {char: ` `, code: `00`}] –ø—Ä–∏ –≤—ã–∑–æ–≤–µ –µ—ë —Å–æ —Å—Ç—Ä–æ–∫–æ–π ` Aaa`';

    const str = ' Aaa';
    const actual = encodeHuffman(str);
    const expected = [
      { char: ` `, code: `00` },
      { char: `A`, code: `01` },
      { char: `a`, code: `1` }
    ];

    expect(actual).toEqual(expected);
  });
});
